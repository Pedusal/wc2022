bp <- ggplot(Eurodata_mestari, aes(x=reorder(Tyyppi, -lkm)
,y=lkm
,fill=reorder(Sisalto, -lkm)
)) +
#facet_wrap(~Tyyppi,ncol = 2)
geom_bar(stat="identity", width=0.7, position=position_dodge(width=0.8))    +
xlab("") +
ylab("Veikkausten määrä") +
theme_classic() +
#scale_fill_manual(values=c("red", "orange", "slateblue4","lightblue", "blue", "yellow2","blue")) +
geom_text(aes(label=lkm),
position = position_dodge(width=0.8),
vjust=1.5, colour="white", size=2.0)
#geom_point(aes(color=Sisalto)) +
#scale_color_gradient(low="#33CC33", high="#CCFFCC") +
print(bp)
print(bp)
bonus_tekijat <- subset(Eurodata_lkm, ((Tyyppi == "Maalintekijä"&
lkm == 0) &
!is.na(Sisalto)))
View(bonus_tekijat)
View(Eurodata_lkm)
bonus_tekijat <- subset(Eurodata_lkm, ((Tyyppi == "Maalintekijä"&
lkm == 1) &
!is.na(Sisalto)))
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
View(bonus_tekijat)
View(bonus_tekijat)
View(bonus_tekijat)
View(bonus_tekijat)
View(Eurodata)
#rm(list=ls())  # REMOVE ALL OBJECTS
### Asenna hyvaksi havaitut paketit ######
pkgs <- c("readxl", # used for data import
"dplyr",        # used for testing linear hypothesis
"knitr"  #used for data import
,"gapminder"
,"stringr"
,"formattable"
,"markdown"
,"mame")
#install.packages(c(pkgs))
#install.packages("formattable")
#install.packages("DT")
####### Aseta tyoskentely kansio ja lataa veikkauset ###########
#Get the working directory:
#getwd()
library(readxl)
library(dplyr)
library(knitr)
#Setup the working directory:
setwd("Data")
myFiles <- list.files(pattern = "xlsx$")
veikkaukset <- lapply(myFiles, function(x) read_excel(x))
#oikearivi <- read_excel("data/11oikearivi.xlsx")
### Funktio isoja alkukirjaimia varten
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
library(dplyr)
library(knitr)
library(stringr)
#### Luodaan Eurodata df ###
Eurodata <- data.frame(matrix(ncol = 7, nrow = 0))
#####
#####
if (length(veikkaukset) > 0) {
for (i in 2:length(veikkaukset)) {
veikkaus_apu <- as.data.frame(veikkaukset[i])
#TopScorer
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "TopScorer", "TS",
veikkaus_apu[5,14],veikkaus_apu[5,15],NA,NA)
)
#Mestari
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "Mestari", "M",
veikkaus_apu[5,18],NA,NA,NA)
)
#Valieramaat
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "Välierämaa", "Välierämaa1",
veikkaus_apu[5,17],NA,NA,NA)
)
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "Välierämaa", "Välierämaa2",
veikkaus_apu[6,17],NA,NA,NA)
)
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "Välierämaa", "Välierämaa3",
veikkaus_apu[7,17],NA,NA,NA)
)
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "Välierämaa", "Välierämaa4",
veikkaus_apu[8,17],NA,NA,NA)
)
#Maalintekijat
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "Maalintekijä", "Maalintekijä1",
veikkaus_apu[5,10],veikkaus_apu[5,11],NA,NA)
)
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "Maalintekijä", "Maalintekijä2",
veikkaus_apu[6,10],veikkaus_apu[6,11],NA,NA)
)
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "Maalintekijä", "Maalintekijä3",
veikkaus_apu[7,10],veikkaus_apu[7,11],NA,NA)
)
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "Maalintekijä", "Maalintekijä4",
veikkaus_apu[8,10],veikkaus_apu[8,11],NA,NA)
)
Eurodata <- rbind(Eurodata,
c(veikkaus_apu[1,5], "Maalintekijä", "Maalintekijä5",
veikkaus_apu[9,10],veikkaus_apu[9,11],NA,NA)
)
}
}
#####
### Eurodata col nimet   #########
colnames(Eurodata) <- c("Nimi", "Tyyppi", "Tyyppikd",
"Sisalto","Sisälto_tarkenne", "Tyyppi_lkm", "__")
if (length(veikkaukset)>0) {
## laitetaan iso alkukirjaimet KAIKKIALLE (jokaiseen muuttujaan)
Eurodata <- as.data.frame(apply(Eurodata, c(1,2), simpleCap))
## korvataan jostain tulevat nanat
Eurodata[Eurodata == "NANA"] <- NA
## korvataan Alankomaat -> Hollanti
Eurodata[Eurodata == "Hollanti"] <- "Alankomaat"
## trimmaus
Eurodata <- Eurodata %>%
mutate(across(where(is.character), str_trim, side = "both"))
}
Eurodata_lkm =
Eurodata %>% group_by(Tyyppi) %>% count(Sisalto) %>% mutate(lkm =n)
Eurodata_lkm <- merge(Eurodata_lkm, en_fi_country_colors,
by.x = "Sisalto", by.y = "maa.value", all = TRUE)
###
#write.table(juniori, "data/tutkielmadata_varmuus.txt")
write.table(Eurodata, "Data/Eurodata.txt")
write.table(Eurodata_lkm, "Data/Eurodata_lkm.txt")
View(Eurodata)
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
!is.na(Sisalto)))
View(bonus_tekijat)
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
!is.na(Sisalto)))
as.datatable(
formattable(bonus_tekijat)
,
options = list(
dom = 't',
columnDefs = list(list(
className = 'dt-center',
targets = 1:5)
),
scrollX = TRUE,
#scrollCollapse = TRUE,
fixedColumns = list(leftColumns = 2),
scrollY = "400px", #y scrolli ja taulun pituus
scrollY = "400px", #y scrolli ja taulun pituusre
pageLength = 100 #nakyvien rivien lkm,
)
)
library(ggplot2)
################# piirretaan mestarit
Eurodata_mestari <- subset(Eurodata_lkm, ((Tyyppi == "Mestari" |
Tyyppi =="Välierämaa") &
!is.na(Sisalto)))
Eurodata_mestari <- Eurodata_mestari[order(-Eurodata_mestari$lkm),]
bp <- ggplot(Eurodata_mestari, aes(x=reorder(Tyyppi, -lkm)
,y=lkm
,fill=reorder(Sisalto, -lkm)
)) +
#facet_wrap(~Tyyppi,ncol = 2)
geom_bar(stat="identity", width=0.7, position=position_dodge(width=0.8))    +
xlab("") +
ylab("Veikkausten määrä") +
theme_classic() +
#scale_fill_manual(values=c("red", "orange", "slateblue4","lightblue", "blue", "yellow2","blue")) +
geom_text(aes(label=lkm),
position = position_dodge(width=0.8),
vjust=1.5, colour="white", size=2.0)
#geom_point(aes(color=Sisalto)) +
#scale_color_gradient(low="#33CC33", high="#CCFFCC") +
print(bp)
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
!is.na(Sisalto)))
as.datatable(
formattable(bonus_tekijat)
,
options = list(
dom = 't',
columnDefs = list(list(
className = 'dt-center',
targets = 1:5)
),
scrollX = TRUE,
#scrollCollapse = TRUE,
fixedColumns = list(leftColumns = 2),
scrollY = "400px", #y scrolli ja taulun pituus
scrollY = "400px", #y scrolli ja taulun pituusre
pageLength = 100 #nakyvien rivien lkm,
)
)
bonus_tekijat <- subset(bonus_tekijat, select = c('Nimi','Sisalto','Sisälto_tarkenne'))
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
!is.na(Sisalto)))
# valitataan halutut kolumnit
bonus_tekijat <- subset(bonus_tekijat, select = c('Nimi','Sisalto','Sisälto_tarkenne'))
as.datatable(
formattable(bonus_tekijat)
,
options = list(
dom = 't',
columnDefs = list(list(
className = 'dt-center',
targets = 1:5)
),
scrollX = TRUE,
#scrollCollapse = TRUE,
fixedColumns = list(leftColumns = 2),
scrollY = "400px", #y scrolli ja taulun pituus
scrollY = "400px", #y scrolli ja taulun pituusre
pageLength = 100 #nakyvien rivien lkm,
)
)
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
!is.na(Sisalto)))
# valitataan halutut kolumnit
bonus_tekijat <- subset(bonus_tekijat, select = c('Nimi','Sisalto','Sisälto_tarkenne'))
as.datatable(
formattable(bonus_tekijat)
,
options = list(
dom = 't',
columnDefs = list(list(
className = 'dt-center',
targets = 1:3)
),
scrollX = TRUE,
#scrollCollapse = TRUE,
fixedColumns = list(leftColumns = 2),
scrollY = "400px", #y scrolli ja taulun pituus
scrollY = "400px", #y scrolli ja taulun pituusre
pageLength = 100 #nakyvien rivien lkm,
)
)
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
!is.na(Sisalto)))
# valitataan halutut kolumnit
bonus_tekijat <- subset(bonus_tekijat, select = c('Nimi','Sisalto','Sisälto_tarkenne'))
as.datatable(
formattable(bonus_tekijat),
rownames = '',  #rivin alussa ei mitaan
options = list(
dom = 't',
columnDefs = list(list(
className = 'dt-center',
targets = 1:3)
),
scrollX = TRUE,
#scrollCollapse = TRUE,
fixedColumns = list(leftColumns = 2),
scrollY = "400px", #y scrolli ja taulun pituus
scrollY = "400px", #y scrolli ja taulun pituusre
pageLength = 100 #nakyvien rivien lkm,
)
)
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
!is.na(Sisalto)))
# valitataan halutut kolumnit
bonus_tekijat <- subset(bonus_tekijat, select = c('Nimi','Sisalto','Sisälto_tarkenne'))
colnames(bonus_tekijat<-c("Nimi","Pelaaja","Maa")
as.datatable(
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
!is.na(Sisalto)))
# valitataan halutut kolumnit
bonus_tekijat <- subset(bonus_tekijat, select = c('Nimi','Sisalto','Sisälto_tarkenne'))
clnames(bonus_tekijat) < -c("Nimi","Pelaaja","Maa")
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
!is.na(Sisalto)))
# valitataan halutut kolumnit
bonus_tekijat <- subset(bonus_tekijat, select = c('Nimi','Sisalto','Sisälto_tarkenne'))
colnames(bonus_tekijat) < -c("Nimi","Pelaaja","Maa")
bonus_tekijat <- subset(Eurodata, ((Tyyppi == "Maalintekijä"&
Sisalto %in% bonus_maalarit$Sisalto     ) &
!is.na(Sisalto)))
# valitataan halutut kolumnit
bonus_tekijat <- subset(bonus_tekijat, select = c('Nimi','Sisalto','Sisälto_tarkenne'))
colnames(bonus_tekijat) <- c("Nimi","Pelaaja","Maa")
as.datatable(
formattable(bonus_tekijat),
rownames = '',  #rivin alussa ei mitaan
options = list(
dom = 't',
columnDefs = list(list(
className = 'dt-center',
targets = 1:3)
),
scrollX = TRUE,
#scrollCollapse = TRUE,
fixedColumns = list(leftColumns = 2),
scrollY = "400px", #y scrolli ja taulun pituus
scrollY = "400px", #y scrolli ja taulun pituusre
pageLength = 100 #nakyvien rivien lkm,
)
)
reticulate::repl_python()
reticulate::repl_python()
#Fetch WC data
Y
write.table(matches_df, "Data/ottelut_tulokset.txt")
reticulate::repl_python()
write.table(matches_df, "Data/ottelut_tulokset.txt")
reticulate::repl_python()
rm(list=ls())  # REMOVE ALL OBJECTS
### Asenna hyvaksi havaitut paketit ######
# pkgs <- c("data.table", # used for data import
#           "car",        # used for testing linear hypothesis
#           "haven",      # used for data import
#           #"tidyverse",  # data manipulation etc
#           "broom",      # for working with model coefficients and model summaries efficiently
#           "lubridate",  # used for creating timestamps
#           "DT",         # for displaying data_frames nicely
#           "GGally",     # for "ggpairs" plot
#           "ggfortify",
#           "plotly")  # for enhancing plots
#
# install.packages(c(pkgs))
# loaded_pkgs <- lapply(c(pkgs), library, character.only = TRUE)
#
# library(readxl)
#Sys.which("make")
#install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.2.tar.gz", repos = NULL, type="source")
##install.packages("gt")
##library(gt)
# library(dplyr)
#devtools::install_github('rensa/ggflags')
## NEEDED
# mestari pisteet
## NICE TO HAVE
# kiinnitä tulosrivit
# top 10 oma taulu?
ottelut_tulokset <- read_csv("Data/ottelut_tulokset.csv")
ottelut_tulokset <- read.csv("Data/ottelut_tulokset.csv")
View(matches_df)
rm(list=ls())  # REMOVE ALL OBJECTS
### Asenna hyvaksi havaitut paketit ######
# pkgs <- c("data.table", # used for data import
#           "car",        # used for testing linear hypothesis
#           "haven",      # used for data import
#           #"tidyverse",  # data manipulation etc
#           "broom",      # for working with model coefficients and model summaries efficiently
#           "lubridate",  # used for creating timestamps
#           "DT",         # for displaying data_frames nicely
#           "GGally",     # for "ggpairs" plot
#           "ggfortify",
#           "plotly")  # for enhancing plots
#
# install.packages(c(pkgs))
# loaded_pkgs <- lapply(c(pkgs), library, character.only = TRUE)
#
# library(readxl)
#Sys.which("make")
#install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.2.tar.gz", repos = NULL, type="source")
##install.packages("gt")
##library(gt)
# library(dplyr)
#devtools::install_github('rensa/ggflags')
## NEEDED
# mestari pisteet
## NICE TO HAVE
# kiinnitä tulosrivit
# top 10 oma taulu?
####### Aseta tyoskentely kansio ja lataa veikkauset ###########
#Get the working directory:
#getwd()
library(readxl)
library(dplyr)
library(knitr)
#Setup the working directory:
setwd("Data")
myFiles <- list.files(pattern = "xlsx$")
veikkaukset <- lapply(myFiles, function(x) read_excel(x))
### Funktio isoja alkukirjaimia varten
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
ottelut_tulokset <- read.csv("Data/ottelut_tulokset.csv")
ottelut_tulokset <- read_csv("Data/ottelut_tulokset.csv")
ottelut_tulokset <- read_excel("Data/ottelut_tulokset.csv")
ottelut_tulokset <- read.csv("Data/ottelut_tulokset.csv", sep = '\t')
View(ottelut_tulokset)
maaliporssi1 <- as.data.frame(ottelut_tulokset$away_scorers)
View(maaliporssi1)
maaliporssi1 <- ottelut_tulokset %>%
filter(!is.na(ottelut_tulokset$away_scorers) &
!is.na(ottelut_tulokset$home_scorers)
)
View(maaliporssi1)
maaliporssi1 <- ottelut_tulokset %>% data.frame(c("home_scorers", "away_scorers"))
View(maaliporssi1)
maaliporssi1 <-  data.frame(ottelut_tulokset = c("home_scorers", "away_scorers"))
View(maaliporssi1)
maaliporssi1 <- subset(ottelut_tulokset, select = c(home_scorers,away_scorers))
View(maaliporssi1)
maaliporssi1 <- rbind(ottelut_tulokset$home_scorers, ottelut_tulokset$away_scorers)
View(maaliporssi1)
maaliporssi1 <- cbind(ottelut_tulokset$home_scorers, ottelut_tulokset$away_scorers)
View(maaliporssi1)
maaliporssi1 <-  subset(ottelut_tulokset, select = c(home_scorers,away_scorers))
unlist(maaliporssi1)
unlist(maaliporssi1$home_scorers)
lapply(maaliporssi1$home_scorers, unlist)
View(maaliporssi1)
reticulate::repl_python()
ottelut_tulokset <- read.table("Data/ottelut_tulokset.csv")
ottelut_tulokset <- read.table("Data/ottelut_tulokset.txt")
ottelut_tulokset <- read.table("Data/ottelut_tulokset.txt", sep = ",")
View(ottelut_tulokset)
reticulate::repl_python()
reticulate::repl_python()
rm(list=ls())  # REMOVE ALL OBJECTS
### Asenna hyvaksi havaitut paketit ######
# pkgs <- c("data.table", # used for data import
#           "car",        # used for testing linear hypothesis
#           "haven",      # used for data import
#           #"tidyverse",  # data manipulation etc
#           "broom",      # for working with model coefficients and model summaries efficiently
#           "lubridate",  # used for creating timestamps
#           "DT",         # for displaying data_frames nicely
#           "GGally",     # for "ggpairs" plot
#           "ggfortify",
#           "plotly")  # for enhancing plots
#
# install.packages(c(pkgs))
# loaded_pkgs <- lapply(c(pkgs), library, character.only = TRUE)
#
# library(readxl)
#Sys.which("make")
#install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.2.tar.gz", repos = NULL, type="source")
##install.packages("gt")
##library(gt)
# library(dplyr)
#devtools::install_github('rensa/ggflags')
## NEEDED
# mestari pisteet
## NICE TO HAVE
# kiinnitä tulosrivit
# top 10 oma taulu?
ottelut_tulokset <- read.table("Data/ottelut_tulokset.txt", sep = ",")
View(ottelut_tulokset)
ottelut_tulokset <- read.table("Data/ottelut_tulokset.txt", sep = "\t")
View(ottelut_tulokset)
ottelut_tulokset <- read.table("Data/ottelut_tulokset.csv", sep = "\t")
View(ottelut_tulokset)
ottelut_tulokset <- read.csv("Data/ottelut_tulokset.csv", sep = "\t")
View(ottelut_tulokset)
ottelut_tulokset <- read.csv2("Data/ottelut_tulokset.csv", sep = "\t")
View(ottelut_tulokset)
reticulate::repl_python()
reticulate::repl_python()
rm(list=ls())  # REMOVE ALL OBJECTS
### Asenna hyvaksi havaitut paketit ######
# pkgs <- c("data.table", # used for data import
#           "car",        # used for testing linear hypothesis
#           "haven",      # used for data import
#           #"tidyverse",  # data manipulation etc
#           "broom",      # for working with model coefficients and model summaries efficiently
#           "lubridate",  # used for creating timestamps
#           "DT",         # for displaying data_frames nicely
#           "GGally",     # for "ggpairs" plot
#           "ggfortify",
#           "plotly")  # for enhancing plots
#
# install.packages(c(pkgs))
# loaded_pkgs <- lapply(c(pkgs), library, character.only = TRUE)
#
# library(readxl)
#Sys.which("make")
#install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.2.tar.gz", repos = NULL, type="source")
##install.packages("gt")
##library(gt)
# library(dplyr)
#devtools::install_github('rensa/ggflags')
## NEEDED
# mestari pisteet
## NICE TO HAVE
# kiinnitä tulosrivit
# top 10 oma taulu?
ottelut_tulokset <- read.csv2("Data/ottelut_tulokset.csv", sep = "\t")
View(ottelut_tulokset)
library(tidyr)
unnest(ottelut_tulokset$home_scorers)
reticulate::repl_python()
reticulate::repl_python()
